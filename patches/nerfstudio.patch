diff --git a/nerfstudio/viewer/export_panel.py b/nerfstudio/viewer/export_panel.py
index 76808a27..48113644 100644
--- a/nerfstudio/viewer/export_panel.py
+++ b/nerfstudio/viewer/export_panel.py
@@ -25,11 +25,13 @@ from nerfstudio.models.base_model import Model
 from nerfstudio.models.splatfacto import SplatfactoModel
 from nerfstudio.viewer.control_panel import ControlPanel
 
+import requests
 
 def populate_export_tab(
     server: viser.ViserServer,
     control_panel: ControlPanel,
     config_path: Path,
+    datapath: Path,
     viewer_model: Model,
 ) -> None:
     viewing_gsplat = isinstance(viewer_model, SplatfactoModel)
@@ -41,11 +43,11 @@ def populate_export_tab(
             control_panel.crop_viewport = crop_output.value
 
     with server.add_gui_folder("Splat"):
-        populate_splat_tab(server, control_panel, config_path, viewing_gsplat)
+        populate_splat_tab(server, control_panel, config_path, datapath, viewing_gsplat)
     with server.add_gui_folder("Point Cloud"):
-        populate_point_cloud_tab(server, control_panel, config_path, viewing_gsplat)
+        populate_point_cloud_tab(server, control_panel, config_path, datapath,viewing_gsplat)
     with server.add_gui_folder("Mesh"):
-        populate_mesh_tab(server, control_panel, config_path, viewing_gsplat)
+        populate_mesh_tab(server, control_panel, config_path, datapath, viewing_gsplat)
 
 
 def show_command_modal(client: viser.ClientHandle, what: Literal["mesh", "point cloud", "splat"], command: str) -> None:
@@ -90,6 +92,7 @@ def populate_point_cloud_tab(
     server: viser.ViserServer,
     control_panel: ControlPanel,
     config_path: Path,
+    datapath: Path,
     viewing_gsplat: bool,
 ) -> None:
     if not viewing_gsplat:
@@ -111,26 +114,44 @@ def populate_point_cloud_tab(
             initial_value="open3d",
             hint="Normal map source.",
         )
-        output_dir = server.add_gui_text("Output Directory", initial_value="exports/pcd/")
-        generate_command = server.add_gui_button("Generate Command", icon=viser.Icon.TERMINAL_2)
+        export_name = server.add_gui_text("Point Cloud Name", initial_value="pointcloud-1")
+
+        generate_command = server.add_gui_button("Export Point Cloud", icon=viser.Icon.TERMINAL_2, color="green")
 
         @generate_command.on_click
         def _(event: viser.GuiEvent) -> None:
             assert event.client is not None
-            command = " ".join(
-                [
-                    "ns-export pointcloud",
-                    f"--load-config {config_path}",
-                    f"--output-dir {output_dir.value}",
-                    f"--num-points {num_points.value}",
-                    f"--remove-outliers {remove_outliers.value}",
-                    f"--normal-method {normals.value}",
-                    f"--use_bounding_box {control_panel.crop_viewport}",
-                    f"--save-world-frame {world_frame.value}",
-                    get_crop_string(control_panel.crop_obb),
-                ]
-            )
-            show_command_modal(event.client, "point cloud", command)
+
+            body = {
+                "projectPath": f"{datapath.parent.absolute()}",
+                "configPath": f"{config_path}",
+                "exportName": f"{export_name.value}.ply",
+                "numPoints": f"{num_points.value}",
+                "removeOutliers": f"{remove_outliers.value}",
+                "normalMethod": f"{normals.value}",
+                "useBoundingBox": f"{control_panel.crop_viewport}",
+                "saveWorldFrame": f"{world_frame.value}",
+                "cropString": f"{get_crop_string(control_panel.crop_obb)}",
+            }
+
+            req = requests.post("http://localhost:3000/pointcloud", json=body)
+
+            with event.client.add_gui_modal("Pointcloud") as modal:
+                if req.status_code == 200:
+                    event.client.add_gui_markdown(
+                        "The Export has started. You can refresh the panel below to see the file."
+                    )
+                else:
+                    event.client.add_gui_markdown(
+                        "The Export has failed. Please check the server logs for more information."
+                    )
+
+                close_button = event.client.add_gui_button("Close")
+
+                @close_button.on_click
+                def _(_) -> None:
+                    modal.close()
+
 
     else:
         server.add_gui_markdown("<small>Point cloud export is not currently supported with Gaussian Splatting</small>")
@@ -140,6 +161,7 @@ def populate_mesh_tab(
     server: viser.ViserServer,
     control_panel: ControlPanel,
     config_path: Path,
+    datapath: Path,
     viewing_gsplat: bool,
 ) -> None:
     if not viewing_gsplat:
@@ -155,30 +177,47 @@ def populate_mesh_tab(
         )
         num_faces = server.add_gui_number("# Faces", initial_value=50_000, min=1)
         texture_resolution = server.add_gui_number("Texture Resolution", min=8, initial_value=2048)
-        output_directory = server.add_gui_text("Output Directory", initial_value="exports/mesh/")
+        export_name = server.add_gui_text("Mesh Name", initial_value="mesh-1")
         num_points = server.add_gui_number("# Points", initial_value=1_000_000, min=1, max=None, step=1)
         remove_outliers = server.add_gui_checkbox("Remove outliers", True)
 
-        generate_command = server.add_gui_button("Generate Command", icon=viser.Icon.TERMINAL_2)
+        generate_command = server.add_gui_button("Export Mesh", icon=viser.Icon.TERMINAL_2, color="green")
 
         @generate_command.on_click
         def _(event: viser.GuiEvent) -> None:
             assert event.client is not None
-            command = " ".join(
-                [
-                    "ns-export poisson",
-                    f"--load-config {config_path}",
-                    f"--output-dir {output_directory.value}",
-                    f"--target-num-faces {num_faces.value}",
-                    f"--num-pixels-per-side {texture_resolution.value}",
-                    f"--num-points {num_points.value}",
-                    f"--remove-outliers {remove_outliers.value}",
-                    f"--normal-method {normals.value}",
-                    f"--use_bounding_box {control_panel.crop_viewport}",
-                    get_crop_string(control_panel.crop_obb),
-                ]
-            )
-            show_command_modal(event.client, "mesh", command)
+            
+
+            body = {
+                "projectPath": f"{datapath.parent.absolute()}",
+                "exportName": f"{export_name.value}.obj",
+                "configPath": f"{config_path}",
+                "numFaces": f"{num_faces.value}",
+                "textureResolution": f"{texture_resolution.value}",
+                "numPoints": f"{num_points.value}",
+                "removeOutliers": f"{remove_outliers.value}",
+                "normalMethod": f"{normals.value}",
+                "useBoundingBox": f"{control_panel.crop_viewport}",
+                "cropString": f"{get_crop_string(control_panel.crop_obb)}",
+            }
+
+            req = requests.post("http://localhost:3000/mesh", json=body)
+
+            with event.client.add_gui_modal("Mesh") as modal:
+                if req.status_code == 200:
+                    event.client.add_gui_markdown(
+                        "The Export has started. You can refresh the panel below to see the file."
+                    )
+                else:
+                    event.client.add_gui_markdown(
+                        "The Export has failed. Please check the server logs for more information."
+                    )
+
+                close_button = event.client.add_gui_button("Close")
+
+                @close_button.on_click
+                def _(_) -> None:
+                    modal.close()
 
     else:
         server.add_gui_markdown("<small>Mesh export is not currently supported with Gaussian Splatting</small>")
@@ -188,25 +227,42 @@ def populate_splat_tab(
     server: viser.ViserServer,
     control_panel: ControlPanel,
     config_path: Path,
+    datapath: Path,
     viewing_gsplat: bool,
 ) -> None:
     if viewing_gsplat:
         server.add_gui_markdown("<small>Generate ply export of Gaussian Splat</small>")
 
-        output_directory = server.add_gui_text("Output Directory", initial_value="exports/splat/")
-        generate_command = server.add_gui_button("Generate Command", icon=viser.Icon.TERMINAL_2)
+        export_name = server.add_gui_text("Name export", initial_value="splat-1")
+        generate_command = server.add_gui_button("Generate Splat", icon=viser.Icon.TERMINAL_2, color="green")
 
         @generate_command.on_click
         def _(event: viser.GuiEvent) -> None:
             assert event.client is not None
-            command = " ".join(
-                [
-                    "ns-export gaussian-splat",
-                    f"--load-config {config_path}",
-                    f"--output-dir {output_directory.value}",
-                ]
-            )
-            show_command_modal(event.client, "splat", command)
+
+            body = {
+                "projectPath": f"{datapath.parent.absolute()}",
+                "exportName": f"{export_name.value}",
+                "configPath": f"{config_path}",
+            }
+
+            req = requests.post("http://localhost:3000/splat", json=body)
+
+            with event.client.add_gui_modal("Splat") as modal:
+                if req.status_code == 200:
+                    event.client.add_gui_markdown(
+                        "The Export has started. You can refresh the panel below to see the file."
+                    )
+                else:
+                    event.client.add_gui_markdown(
+                        "The Export has failed. Please check the server logs for more information."
+                    )
+
+                close_button = event.client.add_gui_button("Close")
+
+                @close_button.on_click
+                def _(_) -> None:
+                    modal.close()
 
     else:
         server.add_gui_markdown("<small>Splat export is only supported with Gaussian Splatting methods</small>")
diff --git a/nerfstudio/viewer/render_panel.py b/nerfstudio/viewer/render_panel.py
index a6bbba3a..823e1faf 100644
--- a/nerfstudio/viewer/render_panel.py
+++ b/nerfstudio/viewer/render_panel.py
@@ -20,6 +20,7 @@ import datetime
 import json
 import threading
 import time
+import requests
 from pathlib import Path
 from typing import Dict, List, Literal, Optional, Tuple, Union
 
@@ -1020,10 +1021,10 @@ def populate_render_tab(
         hint="Name of the render",
     )
     render_button = server.add_gui_button(
-        "Generate Command",
+        "Render Video",
         color="green",
-        icon=viser.Icon.FILE_EXPORT,
-        hint="Generate the ns-render command for rendering the camera path.",
+        icon=viser.Icon.CAMERA_SHARE,
+        hint="Render the camera path to a video file.",
     )
 
     reset_up_button = server.add_gui_button(
@@ -1134,28 +1135,30 @@ def populate_render_tab(
         json_outfile.parent.mkdir(parents=True, exist_ok=True)
         with open(json_outfile.absolute(), "w") as outfile:
             json.dump(json_data, outfile)
-        # now show the command
-        with event.client.add_gui_modal("Render Command") as modal:
-            dataname = datapath.name
-            command = " ".join(
-                [
-                    "ns-render camera-path",
-                    f"--load-config {config_path}",
-                    f"--camera-path-filename {json_outfile.absolute()}",
-                    f"--output-path renders/{dataname}/{render_name_text.value}.mp4",
-                ]
-            )
-            event.client.add_gui_markdown(
-                "\n".join(
-                    [
-                        "To render the trajectory, run the following from the command line:",
-                        "",
-                        "```",
-                        command,
-                        "```",
-                    ]
+
+        # make http to localhost:3000 to render the camera path
+        body = {
+            "projectPath": f"{datapath.parent.absolute()}",
+            "cameraPath": f"{json_outfile}",
+            "outputPath": f"renders/{render_name_text.value}.mp4",
+            "configPath": f"{config_path}",
+        }
+
+        req = requests.post(
+            "http://localhost:3000/render-camera-path",
+            json=body,
+        )
+
+        with event.client.add_gui_modal("Render") as modal:
+            if req.status_code == 200:
+                event.client.add_gui_markdown(
+                    "The Rendering has started. You can refresh the panel below to see the file."
                 )
-            )
+            else:
+                event.client.add_gui_markdown(
+                    "The Rendering has failed. Please check the server logs for more information."
+                )
+
             close_button = event.client.add_gui_button("Close")
 
             @close_button.on_click
diff --git a/nerfstudio/viewer/viewer.py b/nerfstudio/viewer/viewer.py
index db84e955..7a2c4557 100644
--- a/nerfstudio/viewer/viewer.py
+++ b/nerfstudio/viewer/viewer.py
@@ -152,7 +152,7 @@ class Viewer:
             titlebar_content=titlebar_theme,
             control_layout="collapsible",
             dark_mode=True,
-            brand_color=(255, 211, 105),
+            brand_color=(117, 130, 255),
         )
 
         self.render_statemachines: Dict[int, RenderStateMachine] = {}
@@ -204,7 +204,7 @@ class Viewer:
             )
 
         with tabs.add_tab("Export", viser.Icon.PACKAGE_EXPORT):
-            populate_export_tab(self.viser_server, self.control_panel, config_path, self.pipeline.model)
+            populate_export_tab(self.viser_server, self.control_panel, config_path, self.datapath, self.pipeline.model)
 
         # Keep track of the pointers to generated GUI folders, because each generated folder holds a unique ID.
         viewer_gui_folders = dict()
